import msgpack5 from 'msgpack5/dist/msgpack5'
import JSONBig from '@voerka/json-bigint'
import _logger from './logger'

const msgpack = msgpack5()

// 判断是否为json数据结构【无用，保留】
function isJson(data, spaceLimit = Infinity) {
	let spaceSymbols, braceLeft, braceRight, bracketLeft, bracketRight
	if (data instanceof Buffer) {
		spaceSymbols = [0x0a, 0x0d, 0x20]
		braceLeft = 0x7b
		braceRight = 0x7d
		bracketLeft = 0x5b
		bracketRight = 0x5d
	} else if (typeof data === 'string') {
		spaceSymbols = ['\n', '\r', ' ']
		braceLeft = '{'
		braceRight = '}'
		bracketLeft = '['
		bracketRight = ']'
	} else {
		return false
	}
	let len = data.length,
		leftPass = false,
		rightPass = false
	for (let i = len; i-- && i < spaceLimit; ) {
		if (!rightPass) {
			if (spaceSymbols.indexOf(data[i]) === -1) {
				if (data[i] === braceRight || data[i] === bracketRight) rightPass = true
				else return false
			}
		}
		if (!leftPass) {
			let j = len - i - 1
			if (spaceSymbols.indexOf(data[j]) === -1) {
				if (data[j] === braceLeft || data[j] === bracketLeft) leftPass = true
				else return false
			}
		}
	}
	return leftPass && rightPass
}

function Uint8ArrayToString(fileData) {
	var dataString = ''
	for (var i = 0; i < fileData.length; i++) {
		dataString += String.fromCharCode(fileData[i])
	}
	return dataString
}

export function isDataJson(data) {
	const res = Uint8ArrayToString(data)
	try {
		JSON.parse(res)
	} catch (error) {
		return false
	}
	return res || true
}

// 序列化
// 我们可以选择学序列化时是否用msgpack压缩
export function serialize(message, { pack = false } = {}) {
	let tempMsg = message
	try {
		tempMsg = JSONBig.stringify(message)
	} catch (error) {
		_logger.error('JSONBig stringify', error.message)
	}
	if (pack) {
		try {
			tempMsg = msgpack.encode(tempMsg)
		} catch (error) {
			_logger.error('msgpack encode', error.message)
		}
	}
	return tempMsg
}

// 反序列
// 反序列化时我们应该以数据为准自行判断是否用msgpack解压缩
export function deserialize(data) {
	if (!isDataJson(data)) {
		try {
			data = msgpack.decode(data)
		} catch (error) {
			_logger.error('msgpack decode', error.message)
		}
	}
	try {
		data = JSONBig.parse(data, String)
	} catch (error) {
		// 保持不变
		_logger.error('JSONBig parse', error.message)
	}
	return data
}
