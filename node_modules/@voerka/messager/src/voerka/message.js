// 获取预设消息
import { mergeDeepRight } from 'ramda'
import md5 from 'md5'

// 字符串原型添加params方法，方便url替换变量
String.prototype.toVoerkaTopic = function (params) {
	const ParamRegExp = /\{\w*\}/g
	let result = this

	// 默认tid = 0
	params = Object.assign({ tid: 0 }, params)
	// 处理tid
	if (params.tid) {
		if (result.indexOf('%{tid}%') > -1) {
			// 分组类
			// 不用做任何处理
		} else {
			// 设备类
			result = result.replace('{domain}', `{domain}/%{tid}%`)
		}
	}
	// 处理其他参数
	if (Array.isArray(params)) {
		let i = 0
		for (let match of result.match(ParamRegExp) || []) {
			if (i < params.length) {
				result = result.replace(match, params[i])
				i += 1
			}
		}
	} else if (typeof params === 'object') {
		for (let name in params) {
			result = result.replace('{' + name + '}', params[name])
		}
	}
	return result
}

// 只包含设备类型主题
export const TOPICS = {
	DEVICE: '/voerka/{domain}/devices/{sn}/#', // 订阅所用
	REGISTER: '/voerka/{domain}/register',
	NOTIFY: '/voerka/{domain}/devices/{sn}/notify',
	ATTRS: '/voerka/{domain}/devices/{sn}/attrs',
	STATUS: '/voerka/{domain}/devices/{sn}/status',
	ACTIONS: '/voerka/{domain}/devices/{sn}/actions',
	ALARMS: '/voerka/{domain}/devices/{sn}/alarms',
	EVENTS: '/voerka/{domain}/devices/{sn}/events',
	EVENTS_STATUS: '/voerka/{domain}/devices/{sn}/status',
	MESSAGE: '/voerka/{domain}/devices/{sn}/message',
	DATA: '/voerka/{domain}/devices/{sn}/data',
	QUERY: '/voerka/{domain}/devices/{sn}/query',
	BROADCAST: '/voerka/{domain}/broadcast/{group}',
	ANSWER: '/voerka/{domain}/devices/{sn}/answer',

	// group一定包含%tid%，如果不是事务tid=0
	DEVICE_GROUP: '/voerka/{domain}/+/groups/{group}/#', // 订阅所用
	NOTIFY_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$notify', // 文档无定义
	ATTRS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$attrs', // 文档无定义
	STATUS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$status', // 文档无定义
	ACTIONS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$actions', // 文档无定义
	ALARMS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$alarms',
	EVENTS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$events',
	EVENTS_STATUS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$status',
	MESSAGE_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$message', // 文档无定义
	DATA_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$data', // 文档无定义
	QUERY_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$query', // 文档无定义
	ANSWER_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$answer', // 文档无定义

	// 资源类型主题
	// 单一资源
	RESOURCE: '/voerka/{domain}/rs/{type}/{id}',
	// 从属资源
	RESOURCE_SUB: '/voerka/{domain}/rs/{type}/{id}/{sub_type}/{sub_id}'
}

// 消息类型
export const MESSAGE_TYPE = {
	REGISTER: 0,
	NOTIFY: 1,
	ATTRS: 2,
	STATUS: 3,
	ACTIONS: 4,
	ALARMS: 5,
	EVENTS: 6,
	MESSAGE: 7,
	DATA: 8,
	QUERY: 9,
	BROADCAST: 10,
	ANSWER: 11
}

// 事件code
export const EVENT_CODE = {
	// 设备事件
	DEVICE_READY: 1000,
	DEVICE_STATUS_CHANGED: 1001,
	DEVICE_ATTRS_CHANGED: 1002,
	DEVICE_TRANS_PROGRESS: 1003,
	DEVICE_BEFORE_SHUTDOWN: 1004,
	DEVICE_ALARM_CANCELLED: 1005,
	DEVICE_ALARM_HANDLED: 1006,
	DEVICE_REPORT: 1007,

	// 资源类事件
	RESOURCE_CREATED: 3001,
	RESOURCE_UPDATED: 3002,
	RESOURCE_DELETED: 3003,
	RESOURCE_PUSHED: 3004,
	RESOURCE_POPED: 3005,
	RESOURCE_MOVED: 3006,
	RESOURCE_JUMPED: 3007,
	RESOURCE_SWAPED: 3008,

	// IO事件
	IO_KEY: 4000,

	// 应用业务事件
	APPLICATION_CALL: 80000 // 呼叫
}

// 告警code
export const ALARM_CODE = {
	// 设备类
	DEVICE_CHECK: 1000,
	DEVICE_SCREEN_ABNORMAL: 1001,
	DEVICE_LOW_BATTERY: 1002,
	DEVICE_MODULE_ABNORMAL: 1003,
	DEVICE_INSUFFICIENT_STORAGE: 1004,
	DEVICE_FIRMWARE_UPGRADE_FAILED: 1005,
	DEVICE_LOG_FULL: 1006,
	DEVICE_UNABLE_CONNECT_LOG_SERVER: 1007,
	DEVICE_REMOTE_DEBUG: 1008,
	DEVICE_INSUFFICIENT_MEMORY: 1009,
	DEVICE_CPU_OVER_LOAD: 1010,
	DEVICE_SUB_DEVICE_REGISTER_FAILED: 1011,
	DEVICE_POWER_DISCONNECTED: 1012,
	DEVICE_ANTI_DISMANTLING: 1013
}

// 告警级别
export const ALARM_LEVEL = {
	// 设备类
	DEVICE_CHECK: 4,
	DEVICE_SCREEN_ABNORMAL: 3,
	DEVICE_LOW_BATTERY: 4,
	DEVICE_MODULE_ABNORMAL: 1,
	DEVICE_INSUFFICIENT_STORAGE: 3,
	DEVICE_FIRMWARE_UPGRADE_FAILED: 3,
	DEVICE_LOG_FULL: 5,
	DEVICE_UNABLE_CONNECT_LOG_SERVER: 3,
	DEVICE_REMOTE_DEBUG: 1,
	DEVICE_INSUFFICIENT_MEMORY: 5,
	DEVICE_CPU_OVER_LOAD: 3,
	DEVICE_SUB_DEVICE_REGISTER_FAILED: 2,
	DEVICE_POWER_DISCONNECTED: 3,
	DEVICE_ANTI_DISMANTLING: 3
}

// 相应码
export const RESPONSE_CODE = {
	RECEIVED: 100, // 消息已收到
	OK: 200, // 成功执行
	OK_DOING: 201, // 成功执行中, payload = { progress }
	OK_DONE: 200, // 成功执行完毕
	ERROR: 500, // 执行失败或异常
	PERMISSION_DENIED: 501, // 	权限不足
	COMMUNICATION: 502, // 通讯错误，用于呼叫对讲
	UNKNOWN_COMMAND: 503, // 未知命令或参数
	REJECTED: 504, // 命令被拒绝
	INSUFFICIENT: 505 // 参数不足或者消息格式不对
}

// 事务处理result
// 告警同此
export const TRANSACTION_RESULT = {
	INITIAL: 0,
	// 事务处理中，result=1
	HANDLING: 1,
	// 事务被挂起，result=2
	SUSPENDED: 2,
	// 事务已恢复，result=3
	RESUMED: 3,

	// 事务已完成，result=10
	COMPLETED: 10,
	// 事务未服务，result=11
	NOT_SERVICED: 11,
	// 事务被忽略，result=12
	IGNORED: 12,
	// 事务被转移，result=13
	TRANSFERRED: 13,
	//事务被拒绝，result=14
	REJECTED: 14,
	//事务超时结束，result=15
	TIMEOUT: 15,
	//事务被判误触，result=16
	MISTAKE: 16,
	//事务出错结束，result=19
	ERROR: 19
}

// 事务status (告警同用)
export const TRANSACTION_STATUS = {
	TODO: 0, // 等待处理
	PROGRESSING: 1, // 处理中
	COMPLETED: 2 // 已处理
}

// TODO: 引入types，这样可以由代码提示
// TODO: 作为实例方法，这样能自动填充更多数据
export function defineMessage(message = {}, options = {}) {
	return mergeDeepRight(
		{
			type: 0,
			from: '',
			to: '',
			sid: 0,
			timestamp: Date.now(),
			token: '',
			tid: 0,
			flags: {},
			payload: {}
		},
		message
	)
}

// 计算消息id
export function getMessageId(message = {}) {
	if (message.from && message.timestamp) {
		const id = (md5(message.from + message.timestamp) + '').toLowerCase()
		return id
	} else {
		return Date.now() + ''
	}
}
