// obtener mensajes predefinidos
import { mergeDeepRight } from 'ramda'
import md5 from 'md5'

// agregar método params al prototipo String, facilita la sustitución de variables en URL
String.prototype.toVoerkaTopic = function (params) {
	const ParamRegExp = /\{\w*\}/g
	let result = this

	// tid predeterminado = 0
	params = Object.assign({ tid: 0 }, params)
	// procesar tid
	if (params.tid) {
		if (result.indexOf('%{tid}%') > -1) {
			// tipo grupo
			// no requiere ningún procesamiento
		} else {
			// tipo dispositivo
			result = result.replace('{domain}', `{domain}/%{tid}%`)
		}
	}
	// procesar otros parámetros
	if (Array.isArray(params)) {
		let i = 0
		for (let match of result.match(ParamRegExp) || []) {
			if (i < params.length) {
				result = result.replace(match, params[i])
				i += 1
			}
		}
	} else if (typeof params === 'object') {
		for (let name in params) {
			result = result.replace('{' + name + '}', params[name])
		}
	}
	return result
}

// solo incluye temas de tipo dispositivo
export const TOPICS = {
	DEVICE: '/voerka/{domain}/devices/{sn}/#', // para suscripción
	REGISTER: '/voerka/{domain}/register',
	NOTIFY: '/voerka/{domain}/devices/{sn}/notify',
	ATTRS: '/voerka/{domain}/devices/{sn}/attrs',
	STATUS: '/voerka/{domain}/devices/{sn}/status',
	ACTIONS: '/voerka/{domain}/devices/{sn}/actions',
	ALARMS: '/voerka/{domain}/devices/{sn}/alarms',
	EVENTS: '/voerka/{domain}/devices/{sn}/events',
	EVENTS_STATUS: '/voerka/{domain}/devices/{sn}/status',
	MESSAGE: '/voerka/{domain}/devices/{sn}/message',
	DATA: '/voerka/{domain}/devices/{sn}/data',
	QUERY: '/voerka/{domain}/devices/{sn}/query',
	BROADCAST: '/voerka/{domain}/broadcast/{group}',
	ANSWER: '/voerka/{domain}/devices/{sn}/answer',

	// group siempre incluye %tid%, si no es una transacción tid=0
	DEVICE_GROUP: '/voerka/{domain}/+/groups/{group}/#', // para suscripción
	NOTIFY_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$notify', // no definido en documentación
	ATTRS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$attrs', // no definido en documentación
	STATUS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$status', // no definido en documentación
	ACTIONS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$actions', // no definido en documentación
	ALARMS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$alarms',
	EVENTS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$events',
	EVENTS_STATUS_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$status',
	MESSAGE_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$message', // no definido en documentación
	DATA_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$data', // no definido en documentación
	QUERY_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$query', // no definido en documentación
	ANSWER_GROUP: '/voerka/{domain}/%{tid}%/groups/{group}/$$answer', // no definido en documentación

	// temas de tipo recurso
	// recurso único
	RESOURCE: '/voerka/{domain}/rs/{type}/{id}',
	// recurso subordinado
	RESOURCE_SUB: '/voerka/{domain}/rs/{type}/{id}/{sub_type}/{sub_id}'
}

// tipos de mensaje
export const MESSAGE_TYPE = {
	REGISTER: 0,
	NOTIFY: 1,
	ATTRS: 2,
	STATUS: 3,
	ACTIONS: 4,
	ALARMS: 5,
	EVENTS: 6,
	MESSAGE: 7,
	DATA: 8,
	QUERY: 9,
	BROADCAST: 10,
	ANSWER: 11
}

// códigos de evento
export const EVENT_CODE = {
	// eventos de dispositivo
	DEVICE_READY: 1000,
	DEVICE_STATUS_CHANGED: 1001,
	DEVICE_ATTRS_CHANGED: 1002,
	DEVICE_TRANS_PROGRESS: 1003,
	DEVICE_BEFORE_SHUTDOWN: 1004,
	DEVICE_ALARM_CANCELLED: 1005,
	DEVICE_ALARM_HANDLED: 1006,
	DEVICE_REPORT: 1007,

	// eventos de tipo recurso
	RESOURCE_CREATED: 3001,
	RESOURCE_UPDATED: 3002,
	RESOURCE_DELETED: 3003,
	RESOURCE_PUSHED: 3004,
	RESOURCE_POPED: 3005,
	RESOURCE_MOVED: 3006,
	RESOURCE_JUMPED: 3007,
	RESOURCE_SWAPED: 3008,

	// eventos IO
	IO_KEY: 4000,

	// eventos de aplicación de negocio
	APPLICATION_CALL: 80000 // llamada
}

// códigos de alarma
export const ALARM_CODE = {
	// tipo dispositivo
	DEVICE_CHECK: 1000,
	DEVICE_SCREEN_ABNORMAL: 1001,
	DEVICE_LOW_BATTERY: 1002,
	DEVICE_MODULE_ABNORMAL: 1003,
	DEVICE_INSUFFICIENT_STORAGE: 1004,
	DEVICE_FIRMWARE_UPGRADE_FAILED: 1005,
	DEVICE_LOG_FULL: 1006,
	DEVICE_UNABLE_CONNECT_LOG_SERVER: 1007,
	DEVICE_REMOTE_DEBUG: 1008,
	DEVICE_INSUFFICIENT_MEMORY: 1009,
	DEVICE_CPU_OVER_LOAD: 1010,
	DEVICE_SUB_DEVICE_REGISTER_FAILED: 1011,
	DEVICE_POWER_DISCONNECTED: 1012,
	DEVICE_ANTI_DISMANTLING: 1013
}

// niveles de alarma
export const ALARM_LEVEL = {
	// tipo dispositivo
	DEVICE_CHECK: 4,
	DEVICE_SCREEN_ABNORMAL: 3,
	DEVICE_LOW_BATTERY: 4,
	DEVICE_MODULE_ABNORMAL: 1,
	DEVICE_INSUFFICIENT_STORAGE: 3,
	DEVICE_FIRMWARE_UPGRADE_FAILED: 3,
	DEVICE_LOG_FULL: 5,
	DEVICE_UNABLE_CONNECT_LOG_SERVER: 3,
	DEVICE_REMOTE_DEBUG: 1,
	DEVICE_INSUFFICIENT_MEMORY: 5,
	DEVICE_CPU_OVER_LOAD: 3,
	DEVICE_SUB_DEVICE_REGISTER_FAILED: 2,
	DEVICE_POWER_DISCONNECTED: 3,
	DEVICE_ANTI_DISMANTLING: 3
}

// códigos de respuesta
export const RESPONSE_CODE = {
	RECEIVED: 100, // mensaje recibido
	OK: 200, // ejecución exitosa
	OK_DOING: 201, // ejecución en progreso, payload = { progress }
	OK_DONE: 200, // ejecución completada con éxito
	ERROR: 500, // fallo o excepción en la ejecución
	PERMISSION_DENIED: 501, // permisos insuficientes
	COMMUNICATION: 502, // error de comunicación, usado para llamadas de intercomunicación
	UNKNOWN_COMMAND: 503, // comando o parámetros desconocidos
	REJECTED: 504, // comando rechazado
	INSUFFICIENT: 505 // parámetros insuficientes o formato de mensaje incorrecto
}

// resultado de procesamiento de transacción
// alarmas usan lo mismo
export const TRANSACTION_RESULT = {
	INITIAL: 0,
	// transacción en proceso, result=1
	HANDLING: 1,
	// transacción suspendida, result=2
	SUSPENDED: 2,
	// transacción reanudada, result=3
	RESUMED: 3,

	// transacción completada, result=10
	COMPLETED: 10,
	// transacción no atendida, result=11
	NOT_SERVICED: 11,
	// transacción ignorada, result=12
	IGNORED: 12,
	// transacción transferida, result=13
	TRANSFERRED: 13,
	// transacción rechazada, result=14
	REJECTED: 14,
	// transacción finalizada por tiempo de espera, result=15
	TIMEOUT: 15,
	// transacción marcada como falsa alarma, result=16
	MISTAKE: 16,
	// transacción finalizada con error, result=19
	ERROR: 19
}

// estado de transacción (usado también para alarmas)
export const TRANSACTION_STATUS = {
	TODO: 0, // pendiente de procesar
	PROGRESSING: 1, // en proceso
	COMPLETED: 2 // procesado
}

// TODO: introducir types, así se puede tener sugerencias de código
// TODO: como método de instancia, así se pueden autocompletar más datos
export function defineMessage(message = {}, options = {}) {
	return mergeDeepRight(
		{
			type: 0,
			from: '',
			to: '',
			sid: 0,
			timestamp: Date.now(),
			token: '',
			tid: 0,
			flags: {},
			payload: {}
		},
		message
	)
}

// calcular id de mensaje
export function getMessageId(message = {}) {
	if (message.from && message.timestamp) {
		const id = (md5(message.from + message.timestamp) + '').toLowerCase()
		return id
	} else {
		return Date.now() + ''
	}
}
