const { VIMPDiscoverBase } = require('../base');
const CloudDiscovererMQTTTransfer = require('../../lib/voerkaTransfer/transfers/vimpMqttTransfer');

const {
    CustomMessage,
    InvitationMessage,
    DismissalMessage,
} = require('../../lib/voerkaTransfer/protocols/vimp/message');

const DISCOVER_INVITE_TOPIC = `/voerka/discover/invite`;
const DISCOVER_CONFIRM_TOPIC = `/voerka/discover/+/answer`;
const DISCOVER_CONFIG_TOPIC = `/voerka/discover/{SN}/config`;

const BROADCAST_TOPIC = `/voerka/0/broadcast`;
const STATUS_ZONE = 'discovering/status';
const DEVICE_ZONE = 'discovering/device';

class CloudDiscoverer extends VIMPDiscoverBase {
    constructor({ settings = {}, msgHandler, transferClass }) {
        super({
            settings: {  // 默认设置
                name: `voerka_cloud_discoverer_anonymous`,
                broker: 'mqtt://mqtt.huanyutong.com:1883',
                username: '',
                password: '',
                will: {
                    topic: `${BROADCAST_TOPIC}/${STATUS_ZONE}`,
                    payload: new CustomMessage({ payload: { "isDiscovering": false } }),
                    retain: true
                },
                willDebug: false,
                interval: '5s',
                inviteTopic: DISCOVER_INVITE_TOPIC,
                confirmTopic: DISCOVER_CONFIRM_TOPIC,
                configTopic: DISCOVER_CONFIG_TOPIC,
                ...settings
            },
            msgHandler,
            transferClass: transferClass || CloudDiscovererMQTTTransfer
        });
    }
    async start() {
        await this.transfer.subscribe({ [this.settings.confirmTopic]: 0 });  // TODO see local discover
        await this.transfer.send({
            data: new InvitationMessage({ SN: 'imdiscoverer' }),
            options: { retain: true, topic: this.settings.inviteTopic }
        });
    }
    async stop() {
        await this.transfer.unsubscribe(this.settings.confirmTopic);
        await this.transfer.publish(this.settings.inviteTopic, '', { retain: true });  // 先清除保留消息
        await this.transfer.send({
            data: new DismissalMessage({ SN: 'imdiscoverer' }),
            options: { retain: false, topic: this.settings.inviteTopic }
        });
    }
    async config(data = {}, { timeout } = {}) {
        await this.transfer.session({ timeout }).send({
            data,
            options: { retain: false, address: this.settings.configTopic.replace('{SN}', SN) }
        });
    }
}

module.exports = CloudDiscoverer;
