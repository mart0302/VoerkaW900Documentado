const { DiscoverBase } = require('../base');

const { Qts5AcceptationMessage, Qts5TestConfigMessage } = require('./message');

class Qts5Discoverer extends DiscoverBase {
    async start() {
        // 在这里编写发现器开始发现的逻辑
        // 比如有的设备发现时需要定时发送广播消息
        // 通过 this.settings 可访问到发现器的配置（下同）

        (function mockDiscover() {
            this.transfer.onData(new Qts5AcceptationMessage({ mac: '1a:2b:3c:4d:5e:6f' }).toStructBuffer());
            this.mockDiscoverIntervalId = setTimeout(mockDiscover.bind(this), 1000);
        }).call(this);

        // let seq = 0;
        // (function mockConfig() {
        //     this.config({ payload: { seq: ++seq } });
        //     this.mockConfigIntervalId = setTimeout(mockConfig.bind(this), 1000);
        // }).call(this);
    }

    async stop() {
        // 在这里编写发现器结束发现的逻辑
        // clearTimeout(this.mockConfigIntervalId);
        clearTimeout(this.mockDiscoverIntervalId);
    }

    /**
     * 转换发现的设备数据到推送接口要求的格式
     * @param data 发现的设备 json 数据
     * @param context 传输器带过来的上下文
     * @returns {Promise<void>} 返回新的 { data, context } 或者不返回（直接在 data 上原地转换）
     */
    async convert({ data, context }) {
        data.SN = data.mac.replace(/:/g, '');
        data.Networks = [{ Interface: 'eth0', MAC: data.mac, IP: '192.168.116.123' }];
        console.log(`@convert: ${JSON.stringify(data, null, 4)}`);
    }

    /**
     * 配置或操作设备
     * @param sn 设备序列号
     * @param cmd 配置或操作命令代号
     * @param payload 配置或操作负载（内容）
     * @param options 选项，如 targetIP，在配置设备 ip 时可能需要指定设备原有的 ip
     * @returns {Promise<{err: null, result: null}>}
     */
    async config({ sn, cmd, payload } = {}, options = {}) {
        // 编写设备配置逻辑，与设备通讯调用 this.transfer.session().send({ data: json数据 })
        // 在 .send 中，data 已经是从 json 数据序列化后的数据
        // 序列化和反序列化由 serializer 和 deserializer 处理
        let seq = payload.seq;
        console.log(`@config(${seq}): start sending @${new Date().toLocaleString()}`);
        let { err, result } = await this.transfer.session().send({
            data: new Qts5TestConfigMessage({ mac: '1a:2b:3c:4d:5e:6f', seq })
        });
        console.log(`@config(${result.seq}): get responding @${new Date().toLocaleString()}`);
        return { err, result };
    }
}

module.exports = Qts5Discoverer;
