const { TransferBase } = require('core/transfer/base');

class Qts5DiscoverTransfer extends TransferBase {
	get clientId() {
		return `${VIServer.nameSpace}_qts5_discoverer_${VIServer.ip}`;
	}

    // 默认设置
    defaultSettings() {
	    return {
            sidKey: 'mac'
        };
    }

	// 实例化函数（可选）
    constructor({ name, serializer, deserializer } = {}, sessionManager) {
        // serializer 为序列化器的路径或实例
        // deserializer 为反序列化器的路径或实例
        super({ name, serializer, deserializer }, sessionManager);
    }

    // 初始化函数（可选）
    async init() {
        // 可在此处编写所需初始化内容
        // 如一些无法在实例化函数中编写的 await 代码
    }

    // 应实现接口如下：

    // 连接方法
    async connect() {
        // 在其中应注册相关回调（见应注册事件回调）
        // 如：client.on('connect', this.onConnected.bind(this));
        this.onConnected();
    }

    // 断开方法
    async disconnect() {

    }

    // 重连方法（可选）
    async reconnect() {

    }

    async send({ data, originalData, options = {} } = {}) {
        // data 为序列化/编码/压缩后的数据（Buffer 或 String），可直接发送
        // originalData 为上述数据的原数据
        // options 为发送选项
        setTimeout((function mockRespond() {
            this.onData(data);
        }).bind(this), 5000);
    }

    async onData(data) {
	    return { data, context: null };
    }
}

module.exports = Qts5DiscoverTransfer;
