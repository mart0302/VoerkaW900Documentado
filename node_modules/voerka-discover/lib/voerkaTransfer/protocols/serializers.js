const msgpack = require('msgpack5')();
const vstruct = require('varstruct');
const JSONbig = require('json-bigint')({ useNativeBigInt: true });
// TEMP: 暂时避开 jsonbig 解析小数时的错误
const JSONbigParse = function (...args) {
    try {
        return JSONbig.parse(...args);
    } catch (e) {
        return JSON.parse(...args);
    }
};
const ajv = new (require('ajv'))({ allErrors: true, jsonPointers: true, useDefaults: true });
require('ajv-errors')(ajv);
function isJson(data, spaceLimit = Infinity) {
    let spaceSymbols, braceLeft, braceRight, bracketLeft, bracketRight;
    if (data instanceof Buffer) {
        spaceSymbols = [0x0a, 0x0d, 0x20];
        braceLeft = 0x7b; braceRight = 0x7d;
        bracketLeft = 0x5b; bracketRight = 0x5d;
    } else if (typeof data === 'string') {
        spaceSymbols = ['\n', '\r', ' '];
        braceLeft = '{'; braceRight = '}';
        bracketLeft = '['; bracketRight = ']';
    } else {
        return false;
    }
    let len = data.length, leftPass = false, rightPass = false;
    for (let i = len; i-- && i < spaceLimit;) {
        if (!rightPass) {
            if (spaceSymbols.indexOf(data[i]) === -1) {
                if (data[i] === braceRight || data[i] === bracketRight) rightPass = true;
                else return false;
            }
        }
        if (!leftPass) {
            let j = len - i - 1;
            if (spaceSymbols.indexOf(data[j]) === -1) {
                if (data[j] === braceLeft || data[j] === bracketLeft) leftPass = true;
                else return false;
            }
        }
    }
    return leftPass && rightPass;
}

class MessageBase {
    static get sidKey() {
        return true;  // 指定该消息的 会话id 键名。设定为 'sid' 或 true 则会话 id 键名为 sid，设定为 false 则不包含会话 id。
    }
    static get responseMessageClass() {
        return false;  // 指定该消息对应的响应消息类型。false 或 空 = 不限定。适用于以重复会话id无差别广播时的消息回复
    }
    static get struct() {
        return [];
    }
    static get schema() {
        return {};
    }
    constructor(body={}) {
        let inValidMessage = this.constructor.validate(body);
        if (inValidMessage) throw new Error(inValidMessage);
        this._bodyHandler = {
            set: (obj, prop, value) => {
                this[prop] = value;
                this[prop] = this.__body[prop] = value;
                obj[prop] = value;
                return true;
            },
            // deleteProperty(target, prop) {
            //     delete this[prop];
            //     delete target[prop];
            //     return true;
            // }
        };
        this.body = this.__body = body || {};
        this.struct = vstruct(this.constructor.struct);
    }
    get body() {
        // 保持同步
        for (let key in this._body) {
            if (this.hasOwnProperty(key)) {
                this._body[key] = this.__body[key] = this[key];
            }
            else {
                delete this._body[key];
                delete this.__body[key];
            }
        }
        return this._body;
    }
    set body(value) {
        for (let key in this._body) {
            delete this[key];
        }
        this._body = new Proxy(value, this._bodyHandler);
        this.__body = value;
        for (let key in value) {
            this[key] = value[key];
        }
    }
    toString() {
        return JSONbig.stringify(this.__body);
    }
    toJson() {
        return this.body;
    }
    toBuffer() {
        return Buffer.from(JSONbig.stringify(this.__body));
    }
    toStructBuffer() {
        return this.constructor.customStructEncoder(this.__body) || this.struct.encode(this.__body);
    }
    toMsgPack() {
        return msgpack.encode(this.__body);
    }
    static validate(data) {
        let dataValidate = ajv.compile(this.schema);
        let isValid = dataValidate(data);
        if (!isValid) {
            return `${dataValidate.errors[0].dataPath} ${dataValidate.errors[0].message}`;
        }
    }

    static customStructEncoder(data) {}
    static customStructDecoder(data) {}
}

// 将数据序列化为 MsgPack 或 unstructured Buffer
function msgPackSerialize(message, options={ debug: false }) {
	if (!message) return '';
    if (options.debug) {  // to unstructured Buffer
        return message.toBuffer ? message.toBuffer() : JSONbig.stringify(message);
    } else {  // MsgPack
        return message.toMsgPack();
    }
}

// 反序列化 MsgPack 或 JSON String 或 JSON Buffer
function msgPackDeserialize(data, options={ debug: false }) {
	if (!data || data.length === 0) return {};
    let unpacked;
	let err;
	if (isJson(data)) {
		// 不论 debug 与否，先尝试用 JSON 解
		try {
		    unpacked = JSONbigParse(data);
        } catch (e) {
		    err = e;
        }
	} else {
		try {  // 否则尝试用 msgpack 解
			unpacked = msgpack.decode(data);
			// 并且解完后尝试转为 JSON
			try {
				unpacked = JSONbigParse(unpacked);
			} catch (e) {/* 不能转化为 JSON 则保持原样 */}
		} catch (e) {  // 失败则报错
			err = e;
		}
	}
	if (err) {
		throw err;
	}
	if (unpacked) {
	    unpacked.__sidKey__ = MessageBase.sidKey;
	    unpacked.__msgClass__ = MessageBase;
    }
	return unpacked;
}

// 将数据序列化为 structured Buffer 或 unstructured Buffer
function msgStructBufferSerialize(message) {
	return message.toStructBuffer();
}

// 反序列化 MsgPack 或 JSON String 或 JSON Buffer
function msgStructBufferDeserialize(msgClass, data) {
    if (!msgClass) return;
    let msgClasses = Array.isArray(msgClass) ? msgClass : [msgClass];
	let unpacked;
	let err;
	if (isJson(data)) {
		try {
		    unpacked = JSONbigParse(data);
        } catch (e) {
		    err = e;
        }
	} else {
		for (let i in msgClasses) {
		    try {  // 否则尝试用 struct 解
                unpacked = msgClass.customStructDecoder(data) || vstruct(msgClasses[i].struct).decode(data);
                // 并且解完后尝试转为 JSON
                try {
                    unpacked = JSONbigParse(unpacked);
                } catch (e) {/* 不能转化为 JSON 则保持原样 */}
                break;
            } catch (e) {  // 失败则报错
                err = e;
            }
        }
	}
	if (err) {
		throw err;
	}
	if (unpacked) {
	    unpacked.__sidKey__ = msgClass.sidKey;
	    unpacked.__msgClass__ = msgClass;
    }
	return unpacked;
}

module.exports = {
    isJson,
    MessageBase,
    msgPackSerialize,
    msgPackDeserialize,
    msgStructBufferSerialize,
    msgStructBufferDeserialize
};