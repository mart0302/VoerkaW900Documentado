const vstruct = require('varstruct');

const { MessageBase } = require('../serializers');

let enforceObject = (target, key, value) => {  // 注: 不会影响for循环和forEach等
    let keys = Object.keys(target);
    let values = [];
    keys.forEach(key => {
        let value = target[key];
        values.push(value);
        target[value] = key;
    });
    target.forEachKey = (fn) => {
        keys.forEach((item, index, array) => { fn(item, index, array) });
    };
    target.forEachValue = (fn) => {
        values.forEach((item, index, array) => { fn(item, index, array) });
    };
    target[`forEach${`${key[0].toUpperCase()}${key.slice(1)}`}`] = target.forEachKey;
    target[`forEach${`${value[0].toUpperCase()}${value.slice(1)}`}`] = target.forEachValue;
    return target;
};

const MESSAGE_TYPES = enforceObject({
	register: 0, // 注册
	notify: 1, // 通知
	attrs: 2, // 属性同步与修改
	status: 3, // 状态同步
	action: 4, // 动作
	alarm: 5, // 报警
	event: 6, // 设备事件
	message: 7, // 文本消息
	data: 8, // 数据传输
	query: 9, // 信息查询
	custom: 10, // 自定义消息
	answer: 11, // 应答消息
}, 'typeName', 'typeCode');

const MESSAGE_TOPICS = enforceObject({
	register: 0, // 注册
	notify: 1, // 通知
	attrs: 2, // 属性同步与修改
	status: 3, // 状态同步
	actions: 4, // 动作
	alarms: 5, // 报警
	events: 6, // 设备事件
	message: 7, // 文本消息
	data: 8, // 数据传输
	query: 9, // 信息查询
	custom: 10, // 自定义消息
	answer: 11, // 应答消息
}, 'topicName', 'topicCode');
const MESSAGE_CODES = {
    updateDeviceStatus: 1001,
    updateDeviceAttribute: 1002,
    reportTransactionProgress: 1003,
};

const MESSAGE_COMMON_CODES = {
    event: {
        '0000': 'eventA',
        '0001': 'eventB',
        '1002': 'deviceAttrsUpdate'
    },
    alarm: {
        '0000': 'alarmA',
        '0001': 'alarmB'
    }
};

const EVENTS = {
    deviceReady: {
        code: 1000,
        message: '设备准备就绪'
    },
    deviceStatusUpdated: {
        code: 1001,
        message: '设备状态变化'
    },
    deviceAttributeUpdated: {
        code: 1002,
        message: '设备属性变化'
    },
    resourceCreated: {
        code: 3001,
        message: '资源被创建'
    },
    resourceUpdated: {
        code: 3002,
        message: '资源被更新'
    },
    resourceDeleted: {
        code: 3003,
        message: '资源被删除'
    }
};

// 发现及其配置用消息 ↓

class CommandMessage extends MessageBase {
    static get Cmd() {
        return 0;
    }
    static get payloadStruct() {
        return [];
    }
    static get struct() {
        let vstruct_Payload = vstruct(this.payloadStruct);
        return [
            { name: 'Header', type: vstruct.String(5) },
            { name: 'SN', type: vstruct.String(12) },
            { name: 'Cmd', type: vstruct.Byte },
            { name: 'Sid', type: vstruct.UInt16BE },
            { name: 'Length', type: vstruct.UInt16BE },
            { name: 'Payload', type: vstruct_Payload },
        ]
    }
    static get payloadSchema() {
        return {};
    }
    static get schema() {
        return {
            type: 'object',
            properties: {
                Header: { type: 'string', minLength: 5, maxLength: 5 },
                SN: { type: 'string', minLength: 12, maxLength: 12 },
                Cmd: { type: 'integer', minimum: 0, maximum: 255 },
                Sid: { type: 'integer', minimum: 0, maximum: 65535 },
                Length: { type: 'integer', minimum: 0, maximum: 65535 },
                Payload: {
                    type: 'object',
                    properties: this.payloadSchema
                }
            }
        }
    }
    constructor(body={}) {super(body);
        let Length = 0;
        try { Length = vstruct(this.constructor.payloadStruct).encode(body.Payload || {}).length } catch (e) {}
        this.body = Object.assign({
            Header : 'MEEYI',
            SN     : 'anonymanonym',  // 服务器序列号
            Cmd    : this.constructor.Cmd || CommandMessage.Cmd,
            Sid    : 0,         // 此处无用
            Payload: {}
        }, body, { Length });
    }
    responseValidator(message) {
        return message.Cmd === ConfigResponseMessage.type;
    }
}

class InvitationMessage extends CommandMessage {
    static get Cmd() {
        return 0;
    }
}

class DismissalMessage extends CommandMessage {
    static get Cmd() {
        return 255;
    }
}

const MQTT_STRUCT = [
    { name: 'Domain', type: vstruct.VarString(vstruct.Byte) },
    { name: 'MQTT', type: vstruct.VarString(vstruct.Byte) },
    { name: 'MQTT_Username', type: vstruct.VarString(vstruct.Byte) },
    { name: 'MQTT_Password', type: vstruct.VarString(vstruct.Byte) },
];
const ADDITIONAL_MQTT_CONFIG_STRUCT = [
    { name: 'AdditionalMqtt', type: vstruct.VarArray(vstruct.Byte, vstruct(MQTT_STRUCT)) }
];

const NETWORK_STRUCT = [
    { name: 'Interface', type: vstruct.VarString(vstruct.Byte) },
    { name: 'MAC', type: vstruct.String(17) },
    { name: 'DHCP', type: vstruct.Byte },
    { name: 'IP', type: vstruct.Array(4, vstruct.Byte) },
    { name: 'SubnetMask', type: vstruct.Array(4, vstruct.Byte) },
    { name: 'Gateway', type: vstruct.Array(4, vstruct.Byte) },
    { name: 'DNS_prefer', type: vstruct.Array(4, vstruct.Byte) },
    { name: 'DNS_alter', type: vstruct.Array(4, vstruct.Byte) },
];
const NETWORKS_STRUCT = [
    { name: 'Networks', type: vstruct.VarArray(vstruct.Byte, vstruct(NETWORK_STRUCT)) }
];

const WIFI_STRUCT = [
    { name: 'WIFI_AP', type: vstruct.VarString(vstruct.Byte) },
    { name: 'WIFI_Enable', type: vstruct.Byte },
    { name: 'WIFI_Secret', type: vstruct.Byte },
    { name: 'WIFI_Password', type: vstruct.VarString(vstruct.Byte) },
];

const INSTALLATION_STRUCT = [
    { name: 'Location', type: vstruct.VarString(vstruct.Byte) },
    { name: 'Long', type: vstruct.FloatBE },
    { name: 'Lati', type: vstruct.FloatBE },
];

const RESTART_STRUCT = [
    { name: 'delay', type: vstruct.Byte },
];

const UPGRADE_STRUCT = [
    { name: 'url', type: vstruct.VarString(vstruct.Byte) },
];

const CALL_STRUCT = [
    { name: 'SN', type: vstruct.String(12) },
];

const REPORT_STRUCT = [
    { name: 'SN', type: vstruct.String(12) },
];

const SWITCH_MODE_STRUCT = [
    { name: 'Mode', type: vstruct.Byte },
];

const NETWORK_CONFIG_STRUCT = [
    { name: 'Interface', type: vstruct.VarString(vstruct.Byte) },
    // { name: 'MAC', type: vstruct.String(17) },
    { name: 'DHCP', type: vstruct.Byte },
    { name: 'IP', type: vstruct.Array(4, vstruct.Byte) },
    { name: 'SubnetMask', type: vstruct.Array(4, vstruct.Byte) },
    { name: 'Gateway', type: vstruct.Array(4, vstruct.Byte) },
    { name: 'DNS_prefer', type: vstruct.Array(4, vstruct.Byte) },
    { name: 'DNS_alter', type: vstruct.Array(4, vstruct.Byte) },
];
const NETWORKS_CONFIG_STRUCT = [
    { name: 'Networks', type: vstruct.VarArray(vstruct.Byte, vstruct(NETWORK_CONFIG_STRUCT)) }
];

const MQTT_SCHEMA = {
    Domain: { type: 'string', minLength: 0, maxLength: 255 },
    MQTT: { type: 'string', minLength: 0, maxLength: 255 },
    MQTT_Username: { type: 'string', minLength: 0, maxLength: 255 },
    MQTT_Password: { type: 'string', minLength: 0, maxLength: 255 }
};
const ADDITIONAL_MQTT_CONFIG_SCHEMA = { type: 'array', items: MQTT_SCHEMA };

const NETWORK_SCHEMA = {
    Interface: { type: 'string', minLength: 0, maxLength: 255 },
    MAC: { type: 'string', minLength: 17, maxLength: 17 },
    DHCP: { type: 'integer', minimum: 0, maximum: 255 },
    IP: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    },
    SubnetMask: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    },
    Gateway: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    },
    DNS_prefer: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    },
    DNS_alter: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    }
};
const NETWORKS_SCHEMA = { Networks: { type: 'array', items: NETWORK_SCHEMA } };

const WIFI_SCHEMA = {
    WIFI_AP: { type: 'string', minLength: 0, maxLength: 255 },
    WIFI_Enable: { type: 'integer', minimum: 0, maximum: 255 },
    WIFI_Secret: { type: 'integer', minimum: 0, maximum: 255 },
    WIFI_Password: { type: 'string', minLength: 0, maxLength: 255 }
};

const INSTALLATION_SCHEMA = {
    Location: { type: 'string', minLength: 0, maxLength: 255 },
    Long: { type: 'number' },
    Lati: { type: 'number' }
};

const RESTART_SCHEMA = {
    delay: { type: 'integer', minimum: 0, maximum: 255 },
};

const UPGRADE_SCHEMA = {
    url: { type: 'string', minLength: 0, maxLength: 255 },
};

const CALL_SCHEMA = {
    SN: { type: 'string', minLength: 17, maxLength: 17 },
};

const REPORT_SCHEMA = {
    SN: { type: 'string', minLength: 17, maxLength: 17 },
};

const SWITCH_MODE_SCHEMA = {
    Mode: { type: 'integer', minimum: 0, maximum: 255 },
};

const NETWORK_CONFIG_SCHEMA = {
    Interface: { type: 'string', minLength: 0, maxLength: 255 },
    // MAC: { type: 'string', minLength: 17, maxLength: 17 },
    DHCP: { type: 'integer', minimum: 0, maximum: 255 },
    IP: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    },
    SubnetMask: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    },
    Gateway: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    },
    DNS_prefer: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    },
    DNS_alter: {
        type: 'array',
        minItems: 4,
        maxItems: 4,
        items: { type: 'integer', minimum: 0, maximum: 255 }
    }
};
const NETWORKS_CONFIG_SCHEMA = { type: 'array', items: NETWORK_SCHEMA };

class AcceptationMessage extends MessageBase {
    static get struct() {
        return [
            { name: 'Header', type: vstruct.String(5) },
            { name: 'SN', type: vstruct.String(12) },
            { name: 'Type', type: vstruct.VarString(vstruct.Byte) },
            { name: 'Model', type: vstruct.VarString(vstruct.Byte) },
            { name: 'Version', type: vstruct.VarString(vstruct.Byte) },

            ...MQTT_STRUCT,

            ...NETWORKS_STRUCT,

            ...WIFI_STRUCT,

            ...INSTALLATION_STRUCT,

            { name: 'ConfigPort', type: vstruct.UInt16BE },

            { name: 'Parent', type: vstruct.String(12) },
        ]
    }
    static get schema() {
        return {
            type: 'object',
            properties: {
                Header: { type: 'string', minLength: 5, maxLength: 5 },
                SN: { type: 'string', minLength: 12, maxLength: 12 },
                Type: { type: 'string', minLength: 0, maxLength: 255 },
                Model: { type: 'string', minLength: 0, maxLength: 255 },
                Version: { type: 'string', minLength: 0, maxLength: 255 },
                Payload: {
                    type: 'object',
                    properties: {
                        ...MQTT_SCHEMA,

                        ...NETWORKS_SCHEMA,

                        ...WIFI_SCHEMA,

                        ...INSTALLATION_SCHEMA,

                        ConfigPort: { type: 'integer', minimum: 0, maximum: 65535 }
                    }
                }
            }
        };
    }
    constructor(body={}) {super(body);
        this.body = Object.assign({
            Header: '',
            SN: '',
            Type: '',
            Model: '',
            Version: '',

            Domain: 0,
            MQTT: '',
            MQTT_Username: '',
            MQTT_Password: '',

            Networks: [
                {
                    MAC: '',
                    DHCP: 0,
                    IP: '',
                    SubnetMask: '',
                    Gateway: '',
                    DNS_Prefer: '',
                    DNS_alter: '',
                }
            ],

            WIFI_AP: '',
            WIFI_Enable: 0,
            WIFI_Secret: '',
            WIFI_Password: '',

            Long: 0,
            Lati: 0,

            ConfigPort: '',

            Parent: '',
        }, body);
    }
}

class MQTTConfigMessage extends CommandMessage {
    static get Cmd() {
        return 1;
    }
    static get payloadStruct() {
        return MQTT_STRUCT;
    }
    static get payloadSchema() {
        return MQTT_SCHEMA;
    }
}

class NetworkConfigMessage extends CommandMessage {
    static get Cmd() {
        return 2;
    }
    static get payloadStruct() {
        return NETWORKS_CONFIG_STRUCT;
    }
    static get payloadSchema() {
        return NETWORK_CONFIG_SCHEMA;
    }
}

class WIFIConfigMessage extends CommandMessage {
    static get Cmd() {
        return 3;
    }
    static get payloadStruct() {
        return WIFI_STRUCT;
    }
    static get payloadSchema() {
        return WIFI_SCHEMA;
    }
}

class InstallationConfigMessage extends CommandMessage {
    static get Cmd() {
        return 4;
    }
    static get payloadStruct() {
        return INSTALLATION_STRUCT;
    }
    static get payloadSchema() {
        return INSTALLATION_SCHEMA;
    }
}

class RestartCommandMessage extends CommandMessage {
    static get Cmd() {
        return 5;
    }
    static get payloadStruct() {
        return RESTART_STRUCT;
    }
    static get payloadSchema() {
        return RESTART_SCHEMA;
    }
}

class UpgradeCommandMessage extends CommandMessage {
    static get Cmd() {
        return 6;
    }
    static get payloadStruct() {
        return UPGRADE_STRUCT;
    }
    static get payloadSchema() {
        return UPGRADE_SCHEMA;
    }
}

class AdditionalMqttConfigCommandMessage extends CommandMessage {
    static get Cmd() {
        return 7;
    }
    static get payloadStruct() {
        return ADDITIONAL_MQTT_CONFIG_STRUCT;
    }
    static get payloadSchema() {
        return MQTT_SCHEMA;
    }
}

class CallMessage extends CommandMessage {
    static get Cmd() {
        return 8;
    }
    static get payloadStruct() {
        return CALL_STRUCT;
    }
    static get payloadSchema() {
        return CALL_SCHEMA;
    }
}

class ReportMessage extends CommandMessage {
    static get Cmd() {
        return 9;
    }
    static get payloadStruct() {
        return REPORT_STRUCT;
    }
    static get payloadSchema() {
        return REPORT_SCHEMA;
    }
}

class SwitchModeCommandMessage extends CommandMessage {
    static get Cmd() {
        return 10;
    }
    static get payloadStruct() {
        return SWITCH_MODE_STRUCT;
    }
    static get payloadSchema() {
        return SWITCH_MODE_SCHEMA;
    }
}

class ConfigResponseMessage extends MessageBase {
    static get payloadStruct() {
        return [
            { name: 'message', type: vstruct.VarString(vstruct.Byte) },
        ];
    }
    static get payloadSchema() {
        return {
            message: { type: 'string', minLength: 0, maxLength: 255 }
        };
    }
    static get struct() {
        let vstruct_Payload = vstruct(this.payloadStruct);
        return [
            { name: 'Header', type: vstruct.String(5) },
            { name: 'SN', type: vstruct.String(12) },
            { name: 'Code', type: vstruct.UInt16BE },
            { name: 'Sid', type: vstruct.UInt16BE },
            { name: 'Length', type: vstruct.UInt16BE },
            { name: 'Payload', type: vstruct_Payload },
        ]
    }
    static get schema() {
        return {
            type: 'object',
            properties: {
                Header: { type: 'string', minLength: 5, maxLength: 5 },
                SN: { type: 'string', minLength: 12, maxLength: 12 },
                Code: { type: 'integer', minimum: 0, maximum: 65535 },
                Sid: { type: 'integer', minimum: 0, maximum: 65535 },
                Length: { type: 'integer', minimum: 0, maximum: 65535 },
                Payload: {
                    type: 'object',
                    properties: this.payloadSchema
                }
            }
        }
    }
    constructor(body={}) {super(body);
        let Length = 0;
        try { Length = vstruct(this.constructor.payloadStruct).encode(body.Payload || {}).length } catch (e) {}
        this.body = Object.assign({
            Header : 'MEEYI',
            SN     : 'anonymanonym',  // 服务器序列号
            Code   : 0,
            Sid    : 0,         // 此处无用
            Payload: Object.assign({ message: '' }, body.Payload || {})
        }, body, { Length });
    }
}

const CommandMessageMap = {
    CommandMessage,
    InvitationMessage,
    DismissalMessage,
    MQTTConfigMessage,
    NetworkConfigMessage,
    WIFIConfigMessage,
    InstallationConfigMessage,
    AdditionalMqttConfigCommandMessage,
    RestartCommandMessage,
    UpgradeCommandMessage,
    CallMessage,
    ReportMessage,
    SwitchModeCommandMessage,
};

const CmdCodeMessageMap = {};
for (let key in CommandMessageMap) {
    let Message = CommandMessageMap[key];
    CmdCodeMessageMap[Message.Cmd] = Message;
}
CommandMessage.getMessageByCmdType = cmdType => CmdCodeMessageMap[cmdType];

// 发现及其配置用消息 ↑

class VoerkaMessage extends MessageBase {
    static get type() {
        return '';
    }
    constructor(body={}) {
        super(body);
        this.body = Object.assign({
            type: this.constructor.hasOwnProperty('type') ? this.constructor.type : VoerkaMessage.type,
            sid: 0,
            tid: 0,
            from: '',
            to: '',
            flags: {},
            timestamp: new Date().getTime(),
            payload: {}
        }, body);
        // if (!Number.isInteger(this.body.sid) || this.body.sid < 0) {
        //     this.body.sid = 0;
        // }
        // if (!Number.isInteger(this.body.tid) || this.body.tid < 0) {
        //     this.body.tid = 0;
        // }
    }
    responseValidator(message) {
        return message.type === AnswerMessage.type;
    }
}

class RegisterMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['register'];
    }
}

class NotifyMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['notify'];
    }
}

class AttrsMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['attrs'];
    }
    constructor(body={}) {
        super(body);
        this.body.flags.receipt = true;  // 必需应答
    }
}

class StatusMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['status'];
    }
}

class ActionMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['action'];
    }
    constructor(body={}) {
        super(body);
        this.body.flags.receipt = true;  // 必需应答
    }
}

class AlarmMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['alarm'];
    }
}

class EventMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['event'];
    }
}

class TextMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['message'];
    }
}

class DataMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['data'];
    }
}

class QueryMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['query'];
    }
}

class CustomMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['custom'];
    }
}

class AnswerMessage extends VoerkaMessage {
    static get type() {
        return MESSAGE_TYPES['answer'];
    }
}

const NETWORK_DISCOVERED_STRUCT = [
    { name: 'Interface', type: vstruct.VarString(vstruct.Byte) },
    { name: 'MAC', type: vstruct.String(17) },
    { name: 'DHCP', type: vstruct.Byte },
    { name: 'IP', type: vstruct.String(15) },
    { name: 'SubnetMask', type: vstruct.String(15) },
    { name: 'Gateway', type: vstruct.String(15) },
    { name: 'DNS_prefer', type: vstruct.String(15) },
    { name: 'DNS_alter', type: vstruct.String(15) },
];
const NETWORKS_DISCOVERED_STRUCT = [
    { name: 'Networks', type: vstruct.VarArray(vstruct.Byte, vstruct(NETWORK_DISCOVERED_STRUCT)) }
];

const NETWORK_DISCOVERED_SCHEMA = {
    Interface: { type: 'string', minLength: 0, maxLength: 255 },
    MAC: { type: 'string', minLength: 17, maxLength: 17 },
    DHCP: { type: 'integer', minimum: 0, maximum: 255 },
    IP: { type: 'string', minLength: 15, maxLength: 15 },
    SubnetMask: { type: 'string', minLength: 15, maxLength: 15 },
    Gateway: { type: 'string', minLength: 15, maxLength: 15 },
    DNS_prefer: { type: 'string', minLength: 15, maxLength: 15 },
    DNS_alter: { type: 'string', minLength: 15, maxLength: 15 }
};
const NETWORKS_DISCOVERED_SCHEMA = { Networks: { type: 'array', items: NETWORK_DISCOVERED_SCHEMA } };

class DiscoveredDevice extends MessageBase {
    static get struct() {
        return [
            { name: 'Header', type: vstruct.String(5) },
            { name: 'SN', type: vstruct.String(12) },
            { name: 'Type', type: vstruct.VarString(vstruct.Byte) },
            { name: 'Model', type: vstruct.VarString(vstruct.Byte) },
            { name: 'Version', type: vstruct.VarString(vstruct.Byte) },

            ...MQTT_STRUCT,

            ...NETWORKS_DISCOVERED_STRUCT,

            ...WIFI_STRUCT,

            ...INSTALLATION_STRUCT,

            { name: 'ConfigPort', type: vstruct.UInt16BE }
        ]
    }
    static get schema() {
        return {
            type: 'object',
            properties: {
                Header: { type: 'string', minLength: 5, maxLength: 5, default: 'MEEYI' },
                SN: { type: 'string', minLength: 12, maxLength: 12, default: '' },
                Type: { type: 'string', minLength: 0, maxLength: 255, default: '' },
                Model: { type: 'string', minLength: 0, maxLength: 255, default: '' },
                Version: { type: 'string', minLength: 0, maxLength: 255, default: '' },
                Payload: {
                    type: 'object',
                    properties: {
                        ...MQTT_SCHEMA,

                        ...NETWORKS_DISCOVERED_SCHEMA,

                        ...WIFI_SCHEMA,

                        ...INSTALLATION_SCHEMA,

                        ConfigPort: { type: 'integer', minimum: 0, maximum: 65535 }
                    }
                }
            }
        };
    }
    constructor(body={}) {super(body);
        this.body = Object.assign({
            Header: '',
            SN: '',
            Type: '',
            Model: '',
            Version: '',

            Domain: 0,
            MQTT: '',
            MQTT_Username: '',
            MQTT_Password: '',

            Interface: [
                {
                    MAC: '',
                    DHCP: 0,
                    IP: '',
                    SubnetMask: '',
                    Gateway: '',
                    DNS_Prefer: '',
                    DNS_alter: '',
                }
            ],

            WIFI_AP: '',
            WIFI_Enable: 0,
            WIFI_Secret: '',
            WIFI_Password: '',

            Long: 0,
            Lati: 0,

            ConfigPort: '',
        }, body);
    }
}

module.exports = {
    MESSAGE_TYPES,
    MESSAGE_TOPICS,
    MESSAGE_CODES,

    InvitationMessage,
    DismissalMessage,
    AcceptationMessage,
    CommandMessage,
    MQTTConfigMessage,
    NetworkConfigMessage,
    WIFIConfigMessage,
    InstallationConfigMessage,
    RestartCommandMessage,
    UpgradeCommandMessage,
    ConfigResponseMessage,
    AdditionalMqttConfigCommandMessage,
    CallMessage,
    ReportMessage,
    SwitchModeCommandMessage,

    VoerkaMessage,
    RegisterMessage,
    NotifyMessage,
    AttrsMessage,
    StatusMessage,
    ActionMessage,
    AlarmMessage,
    EventMessage,
    TextMessage,
    DataMessage,
    QueryMessage,
    CustomMessage,
    AnswerMessage,
    DiscoveredDevice,
};
