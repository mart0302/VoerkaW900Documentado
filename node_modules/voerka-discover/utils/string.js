const { path: getValueByPath } = require('ramda');

/**
 * @param {number[]} digits
 * @return {number[]}
 */
const plusOne = function(digits) {
    let result = '';
    for (let i = digits.length; i--; ) {
        let digit = Number(digits[i]);
        if (digit < 9) {
            result = digits.slice(0, i) + (digit + 1) + result;
            break;
        } else {
            if (isNaN(digit)) result = digits[i] + result;
            else result = '0' + result;
            if (i === 0) result = '1' + result;
        }
    }
    return result;
};

const firstLower = function(str) {
    return str.charAt(0).toLowerCase() + str.substr(1);
};

const firstUpper = function(str) {
    return str.charAt(0).toUpperCase() + str.substr(1);
};

function parseIPInt(ip) {
    return parseInt(ip.split('.').map(item => Number(item).toString(2).padStart(8, 0)).join(''), 2);
}

function formatString(string, variable = {}, { variableRefChar = '$', stringFormatQuote = '``', stringProcessor } = {}) {
    let stringFirstChar = string[0], stringLastChar = string[string.length - 1];
    if (stringFirstChar === stringFormatQuote[0] && stringLastChar === stringFormatQuote[1]) {
        string = string.replace(/{([^{}]+)}/g, (match, path) => {
            // Dado que es una cadena, cuando la variable no está definida o es nula, debe convertirse en una cadena vacía
            // Tenga en cuenta que 0 y falso aún deben conservarse como sus cadenas correspondientes
            let replacedValue = variableRefChar ?
                pickByKeyValPairs([{ value: path }], variable, { variableRefChar, stringFormatQuote, stringProcessor })
                :
                getValueByPath(path.split('.'), variable);
            return replacedValue === undefined || replacedValue === null ? '' : replacedValue;
        });
        (stringFormatQuote === '``') && (string = string.slice(1, -1));
    }
    else if (stringFirstChar === variableRefChar) {
        string = getValueByPath(string.split('.'), variable);
    }
    return string;
}
function getStringFormatter({ variableRefChar = '$', stringFormatQuote = '``', valueProcessor } = {}) {
    return function picker(string, variable) {
        return formatString(string, variable, { variableRefChar, stringFormatQuote, valueProcessor });
    };
}

module.exports = {
    plusOne,
    firstLower,
    firstUpper,
    parseIPInt,
    formatString,
    getStringFormatter,
};

